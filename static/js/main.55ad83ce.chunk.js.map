{"version":3,"sources":["biz/logic.tsx","biz/fetchData.tsx","App.tsx","index.tsx"],"names":["ROB_ROY_WAY_DATE","Date","daysTo","start","date1","diffInTime","getTime","diffInDays","Math","round","abs","fetchData","setItems","fetch","then","res","json","result","input","i","length","day","weightColor","fatColor","diffColor","diff","previous","totalWeight","fat","push","decorate","reverse","error","console","log","App","React","useState","items","useEffect","amountLost","startWeight","currentWeight","amountLeftToLose","daysToRobRoyWay","fatLossProgress","periodProgress","desiredWeight","dataToday","dataAtStart","date","calculations","className","style","width","map","lean","exercise","ate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55ad83ce.chunk.js","sourcesContent":["export interface HealthResult {\n  ate: string\n  date: string\n  diff: number\n  exercise: string\n  fat: number\n  lean: number\n  totalWeight: number\n}\n\nexport interface DecoratedHealthResult extends HealthResult {\n  weightColor: string\n  fatColor: string\n  diffColor: string\n}\n\nexport interface HealthCalculations {\n  amountLost: number\n  startWeight: number\n  currentWeight: number\n  periodProgress: number\n  amountLeftToLose: number\n  daysToRobRoyWay: number\n  fatLossProgress: number\n  desiredWeight: number\n}\n\nconst FAT_LOSS_GOAL = 3 // kgs\nexport const ROB_ROY_WAY_DATE = new Date('04/26/2022')\nconst PERIOD_LENGTH = 4 * 7\n\nexport const calculations = (\n  items: DecoratedHealthResult[]\n): HealthCalculations => {\n  if (items.length === 0) {\n    return {\n      amountLost: 0,\n      startWeight: 0,\n      currentWeight: 0,\n      amountLeftToLose: 0,\n      daysToRobRoyWay: 0,\n      fatLossProgress: 0,\n      periodProgress: 0,\n      desiredWeight: 0,\n    }\n  }\n\n  const dataToday = items[0]\n  const dataAtStart = items[items.length - 1]\n\n  const daysToRobRoyWay = daysTo(ROB_ROY_WAY_DATE)\n  const desiredWeight = dataAtStart.fat - FAT_LOSS_GOAL\n  const amountLost = dataToday.fat - dataAtStart.fat\n  const amountLeftToLose = dataToday.fat - desiredWeight\n  const fatLossProgress = Math.abs(amountLost) / FAT_LOSS_GOAL\n  const periodProgress = daysTo(new Date(dataAtStart.date)) / PERIOD_LENGTH\n\n  return {\n    daysToRobRoyWay,\n    startWeight: dataAtStart.fat,\n    currentWeight: dataToday.fat,\n    desiredWeight: Math.round(desiredWeight * 10) / 10,\n    amountLost: Math.round(amountLost * 10) / 10,\n    amountLeftToLose: Math.round(amountLeftToLose * 10) / 10,\n    fatLossProgress: Math.round(fatLossProgress * 100),\n    periodProgress: Math.round(periodProgress * 100),\n  }\n}\n\nfunction daysTo(start: Date) {\n  const date1 = new Date(start)\n  const date2 = new Date()\n\n  // One day in milliseconds\n  const oneDay = 1000 * 60 * 60 * 24\n\n  // Calculating the time difference between two dates\n  const diffInTime = date2.getTime() - date1.getTime()\n\n  // Calculating the no. of days between two dates\n  const diffInDays = Math.round(diffInTime / oneDay)\n\n  return Math.abs(diffInDays)\n}\n\nexport const decorate = (input: HealthResult[]): DecoratedHealthResult[] => {\n  const result: DecoratedHealthResult[] = []\n  for (let i = 0; i < input.length; i++) {\n    const day = input[i]\n\n    let weightColor = 'yellow'\n    let fatColor = 'yellow'\n    const diffColor = day.diff > 0 ? 'red' : 'green'\n\n    if (i !== 0) {\n      const previous = input[i - 1]\n      weightColor = day.totalWeight > previous.totalWeight ? 'red' : 'green'\n      if (day.totalWeight > previous.totalWeight && day.fat <= previous.fat) {\n        weightColor = 'yellow'\n      }\n      fatColor = day.fat > previous.fat ? 'red' : 'green'\n    }\n\n    result.push({\n      weightColor,\n      fatColor,\n      diffColor,\n      ...day,\n    })\n  }\n\n  return result\n}\n","import { decorate } from './logic'\nimport { RESULT } from './fake'\n\nconst WEIGHT_LAMBA_URL =\n  'https://mysplmqrfc.execute-api.eu-west-2.amazonaws.com/serverless_lambda_stage/weight'\n\nexport const fetchData = (setItems: any) => {\n  // Fake version for testing\n  // setTimeout(() => {\n  //   setItems(decorate(RESULT).reverse())\n  // }, 1000)\n\n  fetch(WEIGHT_LAMBA_URL)\n    .then((res) => res.json())\n    .then(\n      (result: any) => {\n        setItems(decorate(result).reverse())\n      },\n      (error) => {\n        console.log(error)\n      }\n    )\n}\n","import React from 'react'\nimport './App.css'\nimport { fetchData } from './biz/fetchData'\nimport { calculations, DecoratedHealthResult } from './biz/logic'\n\nfunction App() {\n  const [items, setItems] = React.useState<DecoratedHealthResult[]>([])\n\n  React.useEffect(() => {\n    fetchData(setItems)\n  }, [])\n\n  const {\n    startWeight,\n    currentWeight,\n    amountLost,\n    amountLeftToLose,\n    daysToRobRoyWay,\n    fatLossProgress,\n    periodProgress,\n    desiredWeight,\n  } = calculations(items)\n\n  return (\n    <main>\n      <div className=\"progress-container tooltip\">\n        <div className=\"progress-bar\">\n          <span\n            className=\"progress-bar-fill \"\n            style={{ width: `${fatLossProgress}%` }}\n          ></span>\n          <span className=\"tooltiptext\">{fatLossProgress}% fat lost</span>\n        </div>\n      </div>\n      <div className=\"progress-container tooltip\">\n        <div className=\"progress-bar\">\n          <span\n            className=\"progress-bar-fill-days\"\n            style={{ width: `${periodProgress}%` }}\n          ></span>\n          <span className=\"tooltiptext\">\n            {periodProgress}% into time period\n          </span>\n        </div>\n      </div>\n\n      {items.length > 0 && (\n        <>\n          <h3>\n            {startWeight}kg | <span className=\"green\">{amountLost}kg</span> |{' '}\n            <span className={`fat`}>{currentWeight}kg</span> |{' '}\n            <span className=\"red\">{amountLeftToLose}kg</span> | {desiredWeight}\n            kg\n          </h3>\n          <p className=\"target-date\">\n            <em>{daysToRobRoyWay} days remaining to 19kg goal</em>\n          </p>\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>\n                  Weight\n                  <br />\n                  (Fat + Lean)\n                </th>\n                <th>\n                  Calories\n                  <br />\n                  (Exercise - Ate)\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((result: DecoratedHealthResult) => (\n                <tr key={result.date}>\n                  <td>{result.date}</td>\n                  <td>\n                    <span className={result.weightColor}>\n                      {result.totalWeight}\n                    </span>\n                    <br />\n                    <span className={`fat ${result.fatColor}`}>\n                      {result.fat}\n                    </span>{' '}\n                    + <span>{result.lean}</span>\n                  </td>\n                  <td>\n                    <span className={result.diffColor}>{result.diff}</span>\n                    <br />\n                    {result.exercise} - {result.ate}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </>\n      )}\n\n      <p>\n        19kg: Ben More\n        <br />\n        21kg: West Highland Way / Beinn Eighe\n        <br />\n        24kg: Ben An\n        <br />\n        27kg: South Glen Sheil Ridge / Ben Lui\n      </p>\n    </main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}