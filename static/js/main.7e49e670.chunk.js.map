{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","React","useState","items","setItems","useEffect","fetch","then","res","json","result","input","i","length","day","weightColor","leanColor","fatColor","diffColor","diff","previous","totalWeight","fat","lean","push","decorate","reverse","error","console","log","map","date","className","exercise","ate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAwGeA,MApDf,WAGE,MAA0BC,IAAMC,SAAkC,IAAlE,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAfAH,IAAMI,WAAU,WACdC,MACE,wFAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCN,EA3CO,SAACO,GAEhB,IADA,IAAMD,EAAkC,GAC/BE,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAME,EAAMH,EAAMC,GAEdG,EAAc,SACdC,EAAY,SACZC,EAAW,SACTC,EAAYJ,EAAIK,KAAO,EAAI,MAAQ,QAEzC,GAAU,IAANP,EAAS,CACX,IAAMQ,EAAWT,EAAMC,EAAI,GAC3BG,EAAcD,EAAIO,YAAcD,EAASC,YAAc,MAAQ,QAC3DP,EAAIO,YAAcD,EAASC,aAAeP,EAAIQ,KAAOF,EAASE,MAChEP,EAAc,UAEhBC,EAAYF,EAAIS,KAAOH,EAASG,KAAO,MAAQ,QAC/CN,EAAWH,EAAIQ,IAAMF,EAASE,IAAM,MAAQ,QAG9CZ,EAAOc,KAAP,aACET,cACAC,YACAC,WACAC,aACGJ,IAIP,OAAOJ,EAcUe,CAASf,GAAQgB,cAE5B,SAACC,GACCC,QAAQC,IAAIF,QAGjB,IAGD,iCACE,oDACA,kCACE,gCACE,+BACE,sCACA,wCACA,sCACA,qCACA,0CACA,qCACA,2CAGJ,gCACGxB,EAAM2B,KAAI,SAACpB,GAAD,OACT,+BACE,6BAAKA,EAAOqB,OACZ,oBAAIC,UAAWtB,EAAOK,YAAtB,SAAoCL,EAAOW,cAC3C,oBAAIW,UAAWtB,EAAOM,UAAtB,SAAkCN,EAAOa,OACzC,oBAAIS,UAAWtB,EAAOO,SAAtB,SAAiCP,EAAOY,MACxC,6BAAKZ,EAAOuB,WACZ,6BAAKvB,EAAOwB,MACZ,oBAAIF,UAAWtB,EAAOQ,UAAtB,SAAkCR,EAAOS,SAPlCT,EAAOqB,kBCnF5BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7e49e670.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\ninterface HealthResult {\n  ate: string\n  date: string\n  diff: number\n  exercise: string\n  fat: number\n  lean: number\n  totalWeight: number\n}\n\ninterface DecoratedHealthResult extends HealthResult {\n  weightColor: string\n  leanColor: string\n  fatColor: string\n  diffColor: string\n}\n\nconst decorate = (input: HealthResult[]): DecoratedHealthResult[] => {\n  const result: DecoratedHealthResult[] = []\n  for (let i = 0; i < input.length; i++) {\n    const day = input[i]\n\n    let weightColor = 'yellow'\n    let leanColor = 'yellow'\n    let fatColor = 'yellow'\n    const diffColor = day.diff > 0 ? 'red' : 'green'\n\n    if (i !== 0) {\n      const previous = input[i - 1]\n      weightColor = day.totalWeight > previous.totalWeight ? 'red' : 'green'\n      if (day.totalWeight > previous.totalWeight && day.fat <= previous.fat) {\n        weightColor = 'yellow'\n      }\n      leanColor = day.lean < previous.lean ? 'red' : 'green'\n      fatColor = day.fat > previous.fat ? 'red' : 'green'\n    }\n\n    result.push({\n      weightColor,\n      leanColor,\n      fatColor,\n      diffColor,\n      ...day,\n    })\n  }\n\n  return result\n}\n\nfunction App() {\n  // const items: DecoratedHealthResult[] = decorate(RESULT).reverse()\n\n  const [items, setItems] = React.useState<DecoratedHealthResult[]>([])\n  React.useEffect(() => {\n    fetch(\n      'https://mysplmqrfc.execute-api.eu-west-2.amazonaws.com/serverless_lambda_stage/hello'\n    )\n      .then((res) => res.json())\n      .then(\n        (result: any) => {\n          setItems(decorate(result).reverse())\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }, [])\n\n  return (\n    <main>\n      <h2>Health this period</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Weight</th>\n            <th>Lean</th>\n            <th>Fat</th>\n            <th>Exercise</th>\n            <th>Ate</th>\n            <th>Diff</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((result: DecoratedHealthResult) => (\n            <tr key={result.date}>\n              <td>{result.date}</td>\n              <td className={result.weightColor}>{result.totalWeight}</td>\n              <td className={result.leanColor}>{result.lean}</td>\n              <td className={result.fatColor}>{result.fat}</td>\n              <td>{result.exercise}</td>\n              <td>{result.ate}</td>\n              <td className={result.diffColor}>{result.diff}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </main>\n  )\n}\n\nexport default App\n\nexport const RESULT = [\n  {\n    ate: '1371',\n    date: '2022-01-03',\n    diff: -383,\n    exercise: '1754',\n    fat: 37.5,\n    lean: 58.1,\n    totalWeight: 95.6,\n  },\n  {\n    ate: '1365',\n    date: '2022-01-04',\n    diff: -1395,\n    exercise: '2760',\n    fat: 37.1,\n    lean: 58.7,\n    totalWeight: 95.8,\n  },\n  {\n    ate: '1427',\n    date: '2022-01-05',\n    diff: -912,\n    exercise: '2339',\n    fat: 36.3,\n    lean: 59.6,\n    totalWeight: 95.9,\n  },\n  {\n    ate: '1655',\n    date: '2022-01-06',\n    diff: -451,\n    exercise: '2106',\n    fat: 35.8,\n    lean: 59.7,\n    totalWeight: 95.6,\n  },\n  {\n    ate: '1692',\n    date: '2022-01-07',\n    diff: +343,\n    exercise: '1349',\n    fat: 35.3,\n    lean: 60.5,\n    totalWeight: 95.8,\n  },\n  {\n    ate: '1519',\n    date: '2022-01-08',\n    diff: -444,\n    exercise: '1963',\n    fat: 35.0,\n    lean: 60.6,\n    totalWeight: 95.6,\n  },\n  {\n    ate: '1890',\n    date: '2022-01-09',\n    diff: -2538,\n    exercise: '4428',\n    fat: 34.5,\n    lean: 60.4,\n    totalWeight: 95.0,\n  },\n  {\n    ate: '1610',\n    date: '2022-01-10',\n    diff: -529,\n    exercise: '2139',\n    fat: 34.2,\n    lean: 60.5,\n    totalWeight: 94.8,\n  },\n  {\n    ate: '1739',\n    date: '2022-01-11',\n    diff: -188,\n    exercise: '1927',\n    fat: 34.1,\n    lean: 60.6,\n    totalWeight: 94.7,\n  },\n  {\n    ate: '1739',\n    date: '2022-01-12',\n    diff: -188,\n    exercise: '1927',\n    fat: 34.2,\n    lean: 60.8,\n    totalWeight: 94.8,\n  },\n] as HealthResult[]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}